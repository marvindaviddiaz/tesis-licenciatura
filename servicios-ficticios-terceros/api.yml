AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Tesis Licenciatura

Parameters:
  Prefix:
    Description: Prefix (without spaces)
    Type: String
  eafgConsultaArn:
    Type: String
  eafgPagoArn:
    Type: String
  eefgConsultaArn:
    Type: String
  eefgPagoArn:
    Type: String
  etfgConsultaArn:
    Type: String
  etfgPagoArn:
    Type: String

Globals:
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:

#  VpcEndpointTercerosApi:
#    Type: AWS::EC2::VPCEndpoint
#    Properties:
#      PolicyDocument: '{
#        "Version":"2012-10-17",
#        "Statement":[{
#        "Effect":"Allow",
#        "Principal": "*",
#        "Action":["*"],
#        "Resource":["*"]
#        }]
#      }'
#      PrivateDnsEnabled: true
#      SecurityGroupIds:
#        - sg-877d0ee2
#      ServiceName: com.amazonaws.us-east-1.execute-api
#      SubnetIds:
#        - subnet-a30268c6
#        - subnet-fad6ecd2
#      VpcEndpointType: Interface
#      VpcId: vpc-952bf3f0

  ServerlessTercerosApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: servicios-ficticios-terceros
      StageName: dev
#      EndpointConfiguration: PRIVATE
      DefinitionBody:
        swagger: '2.0'
#        x-amazon-apigateway-policy:
#          Version: "2012-10-17"
#          Statement:
#            - Effect: "Deny"
#              Principal: "*"
#              Action: "execute-api:Invoke"
#              Resource:
#                Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*"
#              Condition:
#                StringNotEqualsIfExists:
#                  aws:sourceVpce: !Ref VpcEndpointTercerosApi
#            - Effect: "Allow"
#              Principal: "*"
#              Action: "execute-api:Invoke"
#              Resource:
#                Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*"
        paths:
          /eafg/consulta/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eafgConsultaArn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /eafg/pago/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eafgPagoArn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /etfg/consulta/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${etfgConsultaArn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /etfg/pago/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${etfgPagoArn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /eefg/consulta/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eefgConsultaArn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /eefg/pago/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eefgPagoArn}/invocations'
                responses:
                  default:
                    statusCode: "200"


  #################
  ######## PERMISSIONS
  #################

  eafgConsultaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${eafgConsultaArn}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  eafgPagoPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub ${eafgPagoArn}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  eefgConsultaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${eefgConsultaArn}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  eefgPagoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${eefgPagoArn}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  etfgConsultaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${etfgConsultaArn}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  etfgPagoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${etfgPagoArn}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"
