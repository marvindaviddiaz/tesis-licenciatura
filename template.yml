AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Tesis Licenciatura

Globals:
  Function:
    Runtime: java11
    Timeout: 30
    MemorySize: 128
    Tags:
      bill: tesis
    Environment:
      Variables:
        RDS_ENDPOINT: /Tesis/BD/host
        RDS_DB_NAME: /Tesis/BD/name
        RDS_USERNAME: /Tesis/BD/user
        RDS_PASSWORD: /Tesis/BD/password

  Api:
    # Allows an application running locally on port 8080 to call this API
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:

  RoleForLambdas:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -   Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
          -   Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action: "sts:AssumeRole"
          -   Effect: "Allow"
              Action: "ssm:GetParameter"
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Tesis/BD/*'
          -   Effect: "Allow"
              Action: "kms:Decrypt"
              Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/5a4f90fd-e1eb-4181-858f-d277187bfd1c'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

#################
######## TERCEROS
#################

  eafgConsulta:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: eafg-consulta
      Handler: com.github.marvindaviddiaz.Servicio
      CodeUri: ./eafg-consulta.jar
      Description: Consulta de Agua
      Role: !GetAtt RoleForLambdas.Arn

  eafgPago:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: eafg-pago
      Handler: com.github.marvindaviddiaz.Servicio
      CodeUri: ./eafg-pago.jar
      Description: Pago de Agua
      Role: !GetAtt RoleForLambdas.Arn

  eefgConsulta:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: eefg-consulta
      Handler: com.github.marvindaviddiaz.Servicio
      CodeUri: ./eefg-consulta.jar
      Description: Consulta de Electricidad
      Role: !GetAtt RoleForLambdas.Arn

  eefgPago:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: eefg-pago
      Handler: com.github.marvindaviddiaz.Servicio
      CodeUri: ./eefg-pago.jar
      Description: Pago de Electricidad
      Role: !GetAtt RoleForLambdas.Arn

  etfgConsulta:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: etfg-consulta
      Handler: com.github.marvindaviddiaz.Servicio
      CodeUri: ./etfg-consulta.jar
      Description: Consulta de Teléfono
      Role: !GetAtt RoleForLambdas.Arn

  etfgPago:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: etfg-pago
      Handler: com.github.marvindaviddiaz.Servicio
      CodeUri: ./etfg-pago.jar
      Description: Pago de Teléfono
      Role: !GetAtt RoleForLambdas.Arn


  ServerlessTercerosApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: servicios-ficticios-terceros
      StageName: dev
      DefinitionBody:
        swagger: '2.0'
        paths:
          /eafg/consulta/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eafgConsulta.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /eafg/pago/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eafgPago.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /etfg/consulta/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${etfgConsulta.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /etfg/pago/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${etfgPago.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /eefg/consulta/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eefgConsulta.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"
          /eefg/pago/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${eefgPago.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"

  eafgConsultaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt eafgConsulta.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  eafgPagoPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt eafgPago.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  eefgConsultaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt eefgConsulta.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  eefgPagoPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt eefgPago.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  etfgConsultaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt etfgConsulta.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

  etfgPagoPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt etfgPago.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessTercerosApi}/*/*/*"

##################
######## SERVICIOS
##################

  buscarServicio:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: buscar-servicio
      Handler: com.github.marvindaviddiaz.ServicioService
      CodeUri: ./buscar-servicio.jar
      Description: Buscar Servicio
      Role: !GetAtt RoleForLambdas.Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0b2c9b4bfdded5eaf
        SubnetIds:
          - subnet-73dbc135
          - subnet-84e018f3

  listarCuentas:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: listar-cuentas
      Handler: com.github.marvindaviddiaz.CuentaService
      CodeUri: ./listar-cuentas.jar
      Description: Listar Cuentas
      Role: !GetAtt RoleForLambdas.Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0b2c9b4bfdded5eaf
        SubnetIds:
          - subnet-73dbc135
          - subnet-84e018f3


  obtenerIdentificadores:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: obtener-identificadores
      Handler: com.github.marvindaviddiaz.IdentificadorService
      CodeUri: ./obtener-identificadores.jar
      Description: Obtener Identificadores
      Role: !GetAtt RoleForLambdas.Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-0b2c9b4bfdded5eaf
        SubnetIds:
          - subnet-73dbc135
          - subnet-84e018f3

## PERMISOS

  buscarServicioPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt buscarServicio.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*/*/*"

  listarCuentasPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt listarCuentas.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*/*/*"

  obtenerIdentificadoresPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt obtenerIdentificadores.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*/*/*"

## API

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: arquitectura-serverless
      StageName: dev
      DefinitionBody:
        swagger: '2.0'
        securityDefinitions:
          cognitoUserPoolAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - arn:aws:cognito-idp:us-east-1:214527516697:userpool/us-east-1_Tw0ZEXi12
        paths:

          /api/servicios/buscar/:
            get:
              parameters:
                - name: Authorization
                  in: header
                  required: true
                  type: string
                - name: busqueda
                  in: query
                  required: true
                  type: string
              produces:
                - application/json
              security:
                - cognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${buscarServicio.Arn}/invocations'
                responses:
                  default :
                    statusCode: "200"
              responses:
                '200':
                  description: Respuesta Ok

          /api/servicios/{servicio}/identificadores/:
            get:
              parameters:
                - name: Authorization
                  in: header
                  required: true
                  type: string
                - name: servicio
                  in: path
                  required: true
                  type: integer
              produces:
                - application/json
              security:
                - cognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${obtenerIdentificadores.Arn}/invocations'
                responses:
                  default :
                    statusCode: "200"
              responses:
                '200':
                  description: Respuesta Ok

          /api/cuentas/listar/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              security:
                - cognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listarCuentas.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"

#          securitySchemes:
#            cognitoAuth:
#              type: apiKey
#              name: Authorization
#              in: header
#              x-amazon-apigateway-authtype: cognito_user_pools
#              x-amazon-apigateway-authorizer:
#                type: cognito_user_pools
#                providerARNs:
#                  - arn:aws:cognito-idp:us-east-1:214527516697:userpool/us-east-1_Tw0ZEXi12
