AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Tesis Licenciatura


Parameters:
  buscarServicio:
    Type: AWS::Serverless::Function
  listarCuentas:
    Type: AWS::Serverless::Function
  obtenerIdentificadores:
    Type: AWS::Serverless::Function

Globals:
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: arquitectura-serverless
      StageName: dev
      DefinitionBody:
        swagger: '2.0'
        securityDefinitions:
          cognitoUserPoolAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - arn:aws:cognito-idp:us-east-1:214527516697:userpool/us-east-1_Tw0ZEXi12
        paths:

          /api/servicios/buscar/:
            get:
              parameters:
                - name: Authorization
                  in: header
                  required: true
                  type: string
                - name: busqueda
                  in: query
                  required: true
                  type: string
              produces:
                - application/json
              security:
                - cognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${buscarServicio.Arn}/invocations'
                responses:
                  default :
                    statusCode: "200"
              responses:
                '200':
                  description: Respuesta Ok

          /api/servicios/{servicio}/identificadores/:
            get:
              parameters:
                - name: Authorization
                  in: header
                  required: true
                  type: string
                - name: servicio
                  in: path
                  required: true
                  type: integer
              produces:
                - application/json
              security:
                - cognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${obtenerIdentificadores.Arn}/invocations'
                responses:
                  default :
                    statusCode: "200"
              responses:
                '200':
                  description: Respuesta Ok

          /api/cuentas/listar/:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              security:
                - cognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: post
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listarCuentas.Arn}/invocations'
                responses:
                  default:
                    statusCode: "200"

  #################
  ######## PERMISSIONS
  #################

  buscarServicioPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt buscarServicio.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*/*/*"

  listarCuentasPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt listarCuentas.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*/*/*"

  obtenerIdentificadoresPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt obtenerIdentificadores.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*/*/*"
